<%- include('partials/header', {page: 'prompt-settings'}) %>

<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0"><i class="bi bi-chat-square-text"></i> Prompt Settings</h5>
            </div>
            <div class="card-body">
                <p class="mb-4">Configure the prompts used for article generation. Customize how your articles are created.</p>
                
                <form id="prompt-settings-form">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">Article Generation Settings</h5>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-info">
                                        <i class="bi bi-info-circle"></i> Configure your prompts for article generation. The System Prompt and User Prompt control the entire generation process.
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">Article Generation Prompt</h5>
                                        <button class="btn btn-link btn-sm p-0 toggle-card-body" type="button" data-bs-toggle="collapse" data-bs-target="#articlePromptCollapse" aria-expanded="true">
                                            <i class="bi bi-dash-lg"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="collapse show" id="articlePromptCollapse">
                                    <div class="card-body">
                                        <nav>
                                            <div class="nav nav-tabs" id="prompt-tab" role="tablist">
                                                <button class="nav-link active" id="system-prompt-tab" data-bs-toggle="tab" data-bs-target="#system-prompt" type="button" role="tab" aria-controls="system-prompt" aria-selected="true">System Prompt</button>
                                                <button class="nav-link" id="user-prompt-tab" data-bs-toggle="tab" data-bs-target="#user-prompt" type="button" role="tab" aria-controls="user-prompt" aria-selected="false">User Prompt</button>
                                                <button class="nav-link" id="model-settings-tab" data-bs-toggle="tab" data-bs-target="#model-settings" type="button" role="tab" aria-controls="model-settings" aria-selected="false">Model Settings</button>
                                            </div>
                                        </nav>
                                        <div class="tab-content pt-3" id="prompt-tabContent">
                                            <!-- System Prompt Tab -->
                                            <div class="tab-pane fade show active" id="system-prompt" role="tabpanel" aria-labelledby="system-prompt-tab">
                                                <div class="mb-3">
                                                    <p class="mb-3">The system prompt defines the role and capabilities of the AI. This sets the context for the entire generation.</p>
                                                    <textarea class="form-control" id="systemPrompt" name="systemPrompt" rows="10"><%= config.prompts.systemPrompt || 'You are an expert food blogger, culinary SEO specialist, and recipe development expert. Your task is to create comprehensive, data-driven, and easy-to-follow WordPress blog posts about recipes that are engaging, informative, and optimized for search engines.' %></textarea>
                                                </div>
                                            </div>
                                            
                                            <!-- User Prompt Tab -->
                                            <div class="tab-pane fade" id="user-prompt" role="tabpanel" aria-labelledby="user-prompt-tab">
                                                <div class="mb-3">
                                                    <p class="mb-3">The user prompt contains the specific instructions for content generation.</p>
                                                    <textarea class="form-control" id="userPrompt" name="userPrompt" rows="15"><%= config.prompts.userPrompt || 'Act as a professional food blogger, culinary SEO specialist, and recipe development expert. Create a comprehensive, data-driven, and easy-to-follow WordPress blog post about "[keyword]" that is at least [minWords] words long. Follow the structure and guidelines below strictly, while using engaging language that resonates with home cooks of all skill levels.\n\nBlog Post Title: Create an engaging title that includes "[keyword]"\n\nFollow this structure:\n1. Introduction (H2): Start with an intriguing question about the recipe that challenges common beliefs and incorporate the keyword within the first 100 words.\n2. Ingredients List (H2): Provide a clear list with potential substitutions using sensory descriptions.\n3. Timing (H2): Detail preparation, cooking, and total time with helpful comparisons.\n4. Step-by-Step Instructions (H3 for each step): Clear steps with personalized tips.\n5. Storage and Reheating (H2): Explain best practices with specific timeframes.\n6. Variations (H2): Offer 3-4 creative variations with suggestions for different dietary needs.\n7. FAQ (H2): Answer 4-6 common questions with keyword-rich answers.\n8. Conclusion (H2): Summarize key points and include a call to action.' %></textarea>
                                                </div>
                                                
                                                <!-- Hidden fields to maintain compatibility -->
                                                <div style="display: none;">
                                                    <input type="hidden" id="mainPrompt" name="mainPrompt" value="<%= config.prompts.mainPrompt || config.app.contentTemplate || '' %>">
                                                    <input type="hidden" id="part1Prompt" name="part1Prompt" value="<%= config.prompts.part1Prompt || '' %>">
                                                    <input type="hidden" id="part2Prompt" name="part2Prompt" value="<%= config.prompts.part2Prompt || '' %>">
                                                    <input type="hidden" id="part3Prompt" name="part3Prompt" value="<%= config.prompts.part3Prompt || '' %>">
                                                    <input type="hidden" id="useMultiPartGeneration" name="useMultiPartGeneration" value="false">
                                                </div>
                                            </div>
                                            
                                            <!-- Model Settings Tab -->
                                            <div class="tab-pane fade" id="model-settings" role="tabpanel" aria-labelledby="model-settings-tab">
                                                <div class="mb-4">
                                                    <p>Configure the AI model and generation parameters.</p>
                                                    
                                                    <div class="mb-3">
                                                        <label class="form-label">Select AI Model</label>
                                                        <div class="model-selection d-flex flex-wrap gap-2 mb-3">
                                                            <button type="button" class="btn btn-model btn-outline-primary" data-model="gpt-4">GPT-4</button>
                                                            <button type="button" class="btn btn-model btn-outline-primary" data-model="gpt-4o">GPT-4o</button>
                                                            <button type="button" class="btn btn-model btn-outline-primary" data-model="gpt-3.5-turbo">GPT-3.5-Turbo</button>
                                                            <button type="button" class="btn btn-model btn-outline-primary" data-model="gpt-4o-mini">GPT-4o-mini</button>
                                                            <button type="button" class="btn btn-model-custom btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#customModelModal">+ Custom</button>
                                                        </div>
                                                        <input type="hidden" id="selectedModel" name="model" value="<%= config.prompts && config.prompts.model ? config.prompts.model : 'gpt-4' %>">
                                                        <div class="form-text">
                                                            The model you select will be used for all content generation. Custom models will be saved for future use.
                                                        </div>
                                                    </div>
                                                    
                                                    <div class="mb-3">
                                                        <label for="temperatureRange" class="form-label">Temperature: <span id="temperatureValue"><%= config.prompts && config.prompts.temperature ? config.prompts.temperature : '0.7' %></span></label>
                                                        <input type="range" class="form-range" id="temperatureRange" name="temperature" min="0" max="1" step="0.1" value="<%= config.prompts && config.prompts.temperature ? config.prompts.temperature : '0.7' %>">
                                                        <div class="form-text">
                                                            Controls randomness: 0 is more focused and deterministic, 1 is more creative and varied.
                                                        </div>
                                                    </div>
                                                    
                                                    <!-- Keep maxTokens field in the form, but hide it visually -->
                                                    <div style="display: none;">
                                                        <input type="hidden" id="maxTokens" name="maxTokens" value="<%= config.prompts && config.prompts.maxTokens ? config.prompts.maxTokens : '4000' %>">
                                                    </div>
                                                    
                                                    <div class="alert alert-info">
                                                        <i class="bi bi-info-circle"></i> The system will automatically determine the appropriate token limit based on the model selected and your content requirements.
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- SEO Prompts Card -->
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">SEO Metadata Prompts</h5>
                                        <button class="btn btn-link btn-sm p-0 toggle-card-body" type="button" data-bs-toggle="collapse" data-bs-target="#seoPromptsCollapse" aria-expanded="true">
                                            <i class="bi bi-dash-lg"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="collapse show" id="seoPromptsCollapse">
                                    <div class="card-body">
                                        <div class="alert alert-info">
                                            <i class="bi bi-info-circle"></i> 
                                            These prompts are used to generate SEO metadata when Rank Math integration is enabled. Customize how titles, descriptions, and permalinks are created.
                                        </div>
                                        
                                        <!-- Add tabs for SEO Metadata Prompts similar to Article Generation -->
                                        <nav>
                                            <div class="nav nav-tabs" id="seo-prompt-tab" role="tablist">
                                                <button class="nav-link active" id="seo-system-prompt-tab" data-bs-toggle="tab" data-bs-target="#seo-system-prompt" type="button" role="tab" aria-controls="seo-system-prompt" aria-selected="true">System Prompt</button>
                                                <button class="nav-link" id="seo-user-prompt-tab" data-bs-toggle="tab" data-bs-target="#seo-user-prompt" type="button" role="tab" aria-controls="seo-user-prompt" aria-selected="false">User Prompt</button>
                                                <button class="nav-link" id="seo-model-settings-tab" data-bs-toggle="tab" data-bs-target="#seo-model-settings" type="button" role="tab" aria-controls="seo-model-settings" aria-selected="false">Model Settings</button>
                                            </div>
                                        </nav>
                                        
                                        <div class="tab-content pt-3" id="seo-prompt-tabContent">
                                            <!-- SEO System Prompt Tab -->
                                            <div class="tab-pane fade show active" id="seo-system-prompt" role="tabpanel" aria-labelledby="seo-system-prompt-tab">
                                                <div class="mb-3">
                                                    <p class="mb-3">The system prompt defines the role and capabilities of the AI for SEO metadata generation.</p>
                                                    <textarea class="form-control" id="seoSystemPrompt" name="seoSystemPrompt" rows="6"><%= config.rankMath && config.rankMath.systemPrompt ? config.rankMath.systemPrompt : 'You are an expert SEO specialist with deep knowledge of metadata optimization. Your task is to create optimized titles, descriptions, and permalinks that drive clicks and improve search engine rankings.' %></textarea>
                                                </div>
                                            </div>
                                            
                                            <!-- SEO User Prompt Tab -->
                                            <div class="tab-pane fade" id="seo-user-prompt" role="tabpanel" aria-labelledby="seo-user-prompt-tab">
                                                <div class="mb-3">
                                                    <label for="seoTitlePrompt" class="form-label">SEO Title Prompt</label>
                                                    <textarea class="form-control" id="seoTitlePrompt" name="seoTitlePrompt" rows="3"><%= config.rankMath && config.rankMath.titlePrompt ? config.rankMath.titlePrompt : 'Generate 3 SEO-optimized title options for an article about "{keyword}". Each title should be compelling, under 60 characters, include the focus keyword naturally, and encourage clicks. Make each title different in structure and approach.' %></textarea>
                                                    <div class="form-text">Prompt used to generate SEO titles. Use {keyword} as placeholder.</div>
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label for="seoDescriptionPrompt" class="form-label">SEO Description Prompt</label>
                                                    <textarea class="form-control" id="seoDescriptionPrompt" name="seoDescriptionPrompt" rows="3"><%= config.rankMath && config.rankMath.descriptionPrompt ? config.rankMath.descriptionPrompt : 'Generate 3 SEO meta descriptions for an article about "{keyword}". Each description should be 150-160 characters, include the focus keyword, summarize the content value, and include a call-to-action. Make each description unique in approach.' %></textarea>
                                                    <div class="form-text">Prompt used to generate meta descriptions. Use {keyword} as placeholder.</div>
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label for="seoPermalinkPrompt" class="form-label">SEO Permalink Prompt</label>
                                                    <textarea class="form-control" id="seoPermalinkPrompt" name="seoPermalinkPrompt" rows="3"><%= config.rankMath && config.rankMath.permalinkPrompt ? config.rankMath.permalinkPrompt : 'Generate 3 SEO-friendly URL slugs for an article about "{keyword}". Each slug should be short (3-5 words), include the main keyword, use hyphens between words, avoid stop words, and be all lowercase. Make each slug unique but relevant to the topic.' %></textarea>
                                                    <div class="form-text">Prompt used to generate permalink slugs. Use {keyword} as placeholder.</div>
                                                </div>
                                            </div>
                                            
                                            <!-- SEO Model Settings Tab -->
                                            <div class="tab-pane fade" id="seo-model-settings" role="tabpanel" aria-labelledby="seo-model-settings-tab">
                                                <div class="mb-4">
                                                    <p>Configure the AI model and generation parameters.</p>
                                                    
                                                    <div class="mb-3">
                                                        <label class="form-label">Select AI Model</label>
                                                        <div class="seo-model-selection d-flex flex-wrap gap-2 mb-3">
                                                            <button type="button" class="btn btn-seo-model btn-outline-primary" data-model="gpt-4">GPT-4</button>
                                                            <button type="button" class="btn btn-seo-model btn-outline-primary" data-model="gpt-4o">GPT-4o</button>
                                                            <button type="button" class="btn btn-seo-model btn-outline-primary" data-model="gpt-3.5-turbo">GPT-3.5-Turbo</button>
                                                            <button type="button" class="btn btn-seo-model btn-outline-primary" data-model="gpt-4o-mini">GPT-4o-mini</button>
                                                            <button type="button" class="btn btn-seo-model-custom btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#seoCustomModelModal">+ Custom</button>
                                                        </div>
                                                        <input type="hidden" id="selectedSeoModel" name="seoModelName" value="<%= config.rankMath && config.rankMath.model ? config.rankMath.model : 'gpt-4' %>">
                                                        <div class="form-text">
                                                            The model you select will be used for SEO metadata generation. Custom models will be saved for future use.
                                                        </div>
                                                    </div>
                                                    
                                                    <div class="mb-3">
                                                        <label for="seoModelTemperature" class="form-label">Temperature: <span id="seoTempValue"><%= config.rankMath && config.rankMath.temperature ? config.rankMath.temperature : '0.7' %></span></label>
                                                        <input type="range" class="form-range" id="seoModelTemperature" name="seoModelTemperature" min="0" max="1" step="0.1" value="<%= config.rankMath && config.rankMath.temperature ? config.rankMath.temperature : '0.7' %>">
                                                        <div class="d-flex justify-content-between">
                                                            <small>More Focused (0.0)</small>
                                                            <small>More Creative (1.0)</small>
                                                        </div>
                                                    </div>
                                                    
                                                    <div class="alert alert-info">
                                                        <i class="bi bi-info-circle"></i> The system will automatically determine the appropriate token limit based on the model selected and your content requirements.
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-end mt-3">
                        <button type="button" class="btn btn-outline-secondary me-2" id="test-prompt-btn">
                            <i class="bi bi-lightning"></i> Test Prompts
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-save"></i> Save Prompt Settings
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Test Prompt Modal -->
<div class="modal fade" id="testPromptModal" tabindex="-1" aria-labelledby="testPromptModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="testPromptModalLabel">Test Prompt Generation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="testKeyword" class="form-label">Test Keyword</label>
                    <input type="text" class="form-control" id="testKeyword" placeholder="Enter a keyword to test">
                </div>
                
                <div id="testPromptSpinner" class="text-center mb-3 d-none">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Testing...</span>
                    </div>
                    <p class="mt-2">Generating sample content...</p>
                </div>
                
                <div id="testPromptResult" class="d-none">
                    <div class="card mb-3">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Generated Sample</h5>
                        </div>
                        <div class="card-body">
                            <h6 class="mb-2">Title:</h6>
                            <p id="testPromptTitle" class="bg-light p-2 rounded"></p>
                            
                            <h6 class="mb-2">Content Preview:</h6>
                            <div id="testPromptContent" class="bg-light p-2 rounded" style="max-height: 300px; overflow-y: auto;"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="runTestPromptBtn">Test Generation</button>
            </div>
        </div>
    </div>
</div>

<!-- Custom Model Modal -->
<div class="modal fade" id="customModelModal" tabindex="-1" aria-labelledby="customModelModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="customModelModalLabel">Add Custom Model</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="customModelName" class="form-label">Model Name/ID</label>
                    <input type="text" class="form-control" id="customModelName" placeholder="e.g., gpt-4-turbo-2024-04-09">
                    <div class="form-text">Enter the exact model ID to use with the OpenAI API.</div>
                </div>
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    Custom models will be saved in your browser for future use. Make sure to use the exact model ID from OpenAI.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="addCustomModelBtn">Add Model</button>
            </div>
        </div>
    </div>
</div>

<!-- SEO Custom Model Modal -->
<div class="modal fade" id="seoCustomModelModal" tabindex="-1" aria-labelledby="seoCustomModelModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="seoCustomModelModalLabel">Add Custom SEO Model</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="seoCustomModelName" class="form-label">Model Name/ID</label>
                    <input type="text" class="form-control" id="seoCustomModelName" placeholder="e.g., gpt-4-turbo-2024-04-09">
                    <div class="form-text">Enter the exact model ID to use with the OpenAI API.</div>
                </div>
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    Custom models will be saved in your browser for future use. Make sure to use the exact model ID from OpenAI.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="addSeoCustomModelBtn">Add Model</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Temperature slider value display
        const temperatureRange = document.getElementById('temperatureRange');
        const temperatureValue = document.getElementById('temperatureValue');
        
        temperatureRange.addEventListener('input', function() {
            temperatureValue.textContent = this.value;
        });
        
        // SEO Temperature slider value display
        const seoTemperatureRange = document.getElementById('seoModelTemperature');
        const seoTempValue = document.getElementById('seoTempValue');
        
        if (seoTemperatureRange && seoTempValue) {
            seoTemperatureRange.addEventListener('input', function() {
                seoTempValue.textContent = this.value;
            });
        }
        
        // ===== Main Model Selection =====
        const modelButtons = document.querySelectorAll('.btn-model');
        const selectedModelInput = document.getElementById('selectedModel');
        
        // Deselect all model buttons
        function deselectAllModelButtons() {
            modelButtons.forEach(btn => {
                btn.classList.remove('btn-primary');
                btn.classList.add('btn-outline-primary');
            });
        }
        
        // Select a specific model by name
        function selectModel(modelName) {
            // Deselect all buttons first
            deselectAllModelButtons();
            
            // Update hidden input
            selectedModelInput.value = modelName;
            
            // Find the button for this model and select it
            let foundButton = false;
            modelButtons.forEach(btn => {
                if (btn.getAttribute('data-model') === modelName) {
                    btn.classList.remove('btn-outline-primary');
                    btn.classList.add('btn-primary');
                    foundButton = true;
                }
            });
            
            // If button not found and model is valid, create it
            if (!foundButton && validateModelName(modelName)) {
                const newButton = createCustomModelButton(modelName);
                if (newButton) {
                    newButton.classList.remove('btn-outline-primary');
                    newButton.classList.add('btn-primary');
                }
            }
            
            // Log the selection for debugging
            console.log('Selected model:', modelName);
        }
        
        // Add click handlers to all model buttons
        modelButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                const modelName = this.getAttribute('data-model');
                selectModel(modelName);
            });
        });
        
        // Create a custom model button
        function createCustomModelButton(modelName) {
            if (!modelName) return null;
            
            // Check if button already exists
            const existingButton = document.querySelector(`.btn-model[data-model="${modelName}"]`);
            if (existingButton) return existingButton;
            
            const modelSelection = document.querySelector('.model-selection');
            const customButtonTrigger = document.querySelector('.btn-model-custom');
            
            if (!modelSelection || !customButtonTrigger) return null;
            
            const newButton = document.createElement('button');
            newButton.type = 'button';
            newButton.className = 'btn btn-model btn-outline-primary';
            newButton.setAttribute('data-model', modelName);
            newButton.textContent = modelName;
            
            // Add click handler to the new button
            newButton.addEventListener('click', function(e) {
                e.preventDefault();
                selectModel(modelName);
            });
            
            // Insert before the "+ Custom" button
            modelSelection.insertBefore(newButton, customButtonTrigger);
            
            // Save to localStorage
            saveCustomModel(modelName);
            
            return newButton;
        }
        
        // Add custom model button handler
        document.getElementById('addCustomModelBtn').addEventListener('click', function(e) {
            e.preventDefault();
            const customModelName = document.getElementById('customModelName').value.trim();
            
            if (customModelName && validateModelName(customModelName)) {
                // Create the button
                createCustomModelButton(customModelName);
                
                // Select this model
                selectModel(customModelName);
                
                // Clear the input and close the modal
                document.getElementById('customModelName').value = '';
                
                try {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('customModelModal'));
                    if (modal) modal.hide();
                } catch(err) {
                    console.error('Error closing modal:', err);
                }
            } else if (customModelName) {
                showAlert('Invalid model name format. Please check and try again.', 'warning');
            }
        });
        
        // ===== SEO Model Selection =====
        const seoModelButtons = document.querySelectorAll('.btn-seo-model');
        const selectedSeoModelInput = document.getElementById('selectedSeoModel');
        
        // Deselect all SEO model buttons
        function deselectAllSeoModelButtons() {
            seoModelButtons.forEach(btn => {
                btn.classList.remove('btn-primary');
                btn.classList.add('btn-outline-primary');
            });
        }
        
        // Select a specific SEO model by name
        function selectSeoModel(modelName) {
            // Deselect all buttons first
            deselectAllSeoModelButtons();
            
            // Update hidden input
            selectedSeoModelInput.value = modelName;
            
            // Find the button for this model and select it
            let foundButton = false;
            seoModelButtons.forEach(btn => {
                if (btn.getAttribute('data-model') === modelName) {
                    btn.classList.remove('btn-outline-primary');
                    btn.classList.add('btn-primary');
                    foundButton = true;
                }
            });
            
            // If button not found and model is valid, create it
            if (!foundButton && validateModelName(modelName)) {
                const newButton = createSeoCustomModelButton(modelName);
                if (newButton) {
                    newButton.classList.remove('btn-outline-primary');
                    newButton.classList.add('btn-primary');
                }
            }
            
            // Log the selection for debugging
            console.log('Selected SEO model:', modelName);
        }
        
        // Add click handlers to all SEO model buttons
        seoModelButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                const modelName = this.getAttribute('data-model');
                selectSeoModel(modelName);
            });
        });
        
        // Create a custom SEO model button
        function createSeoCustomModelButton(modelName) {
            if (!modelName) return null;
            
            // Check if button already exists
            const existingButton = document.querySelector(`.btn-seo-model[data-model="${modelName}"]`);
            if (existingButton) return existingButton;
            
            const seoModelSelection = document.querySelector('.seo-model-selection');
            const seoCustomButtonTrigger = document.querySelector('.btn-seo-model-custom');
            
            if (!seoModelSelection || !seoCustomButtonTrigger) return null;
            
            const newButton = document.createElement('button');
            newButton.type = 'button';
            newButton.className = 'btn btn-seo-model btn-outline-primary';
            newButton.setAttribute('data-model', modelName);
            newButton.textContent = modelName;
            
            // Add click handler to the new button
            newButton.addEventListener('click', function(e) {
                e.preventDefault();
                selectSeoModel(modelName);
            });
            
            // Insert before the "+ Custom" button
            seoModelSelection.insertBefore(newButton, seoCustomButtonTrigger);
            
            // Save to localStorage
            saveSeoCustomModel(modelName);
            
            return newButton;
        }
        
        // Add custom SEO model button handler
        document.getElementById('addSeoCustomModelBtn').addEventListener('click', function(e) {
            e.preventDefault();
            const seoCustomModelName = document.getElementById('seoCustomModelName').value.trim();
            
            if (seoCustomModelName && validateModelName(seoCustomModelName)) {
                // Create the button
                createSeoCustomModelButton(seoCustomModelName);
                
                // Select this model
                selectSeoModel(seoCustomModelName);
                
                // Clear the input and close the modal
                document.getElementById('seoCustomModelName').value = '';
                
                try {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('seoCustomModelModal'));
                    if (modal) modal.hide();
                } catch(err) {
                    console.error('Error closing modal:', err);
                }
            } else if (seoCustomModelName) {
                showAlert('Invalid model name format. Please check and try again.', 'warning');
            }
        });
        
        // ===== LocalStorage Functions =====
        // Save custom model to localStorage
        function saveCustomModel(modelName) {
            if (!modelName || !window.localStorage) return;
            
            try {
                let customModels = [];
                const saved = localStorage.getItem('customModels');
                if (saved) {
                    customModels = JSON.parse(saved);
                }
                
                if (!customModels.includes(modelName)) {
                    customModels.push(modelName);
                    localStorage.setItem('customModels', JSON.stringify(customModels));
                }
            } catch (err) {
                console.error('Error saving custom model:', err);
            }
        }
        
        // Save SEO custom model to localStorage
        function saveSeoCustomModel(modelName) {
            if (!modelName || !window.localStorage) return;
            
            try {
                let seoCustomModels = [];
                const saved = localStorage.getItem('seoCustomModels');
                if (saved) {
                    seoCustomModels = JSON.parse(saved);
                }
                
                if (!seoCustomModels.includes(modelName)) {
                    seoCustomModels.push(modelName);
                    localStorage.setItem('seoCustomModels', JSON.stringify(seoCustomModels));
                }
            } catch (err) {
                console.error('Error saving SEO custom model:', err);
            }
        }
        
        // Load custom models from localStorage
        function loadCustomModels() {
            if (!window.localStorage) return;
            
            try {
                const saved = localStorage.getItem('customModels');
                if (saved) {
                    const models = JSON.parse(saved);
                    models.forEach(model => {
                        if (validateModelName(model)) {
                            createCustomModelButton(model);
                        }
                    });
                }
            } catch (err) {
                console.error('Error loading custom models:', err);
            }
        }
        
        // Load SEO custom models from localStorage
        function loadSeoCustomModels() {
            if (!window.localStorage) return;
            
            try {
                const saved = localStorage.getItem('seoCustomModels');
                if (saved) {
                    const models = JSON.parse(saved);
                    models.forEach(model => {
                        if (validateModelName(model)) {
                            createSeoCustomModelButton(model);
                        }
                    });
                }
            } catch (err) {
                console.error('Error loading SEO custom models:', err);
            }
        }
        
        // ===== Form Submission =====
        document.getElementById('prompt-settings-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get the latest values directly from the hidden inputs
            const mainModel = document.getElementById('selectedModel').value;
            const seoModel = document.getElementById('selectedSeoModel').value;
            
            // Log form submission values
            console.log('Submitting form with models:', { main: mainModel, seo: seoModel });
            
            // Collect form data
            const formData = {
                useMultiPartGeneration: false,
                // System, user prompts and model settings
                systemPrompt: document.getElementById('systemPrompt').value,
                userPrompt: document.getElementById('userPrompt').value,
                model: mainModel, // Use the value from the hidden input
                temperature: document.getElementById('temperatureRange').value,
                maxTokens: document.getElementById('maxTokens').value,
                // Single and multi-part prompts (hidden fields)
                mainPrompt: document.getElementById('mainPrompt').value,
                part1Prompt: document.getElementById('part1Prompt').value,
                part2Prompt: document.getElementById('part2Prompt').value,
                part3Prompt: document.getElementById('part3Prompt').value,
                // SEO prompts
                seoSystemPrompt: document.getElementById('seoSystemPrompt').value,
                seoTitlePrompt: document.getElementById('seoTitlePrompt').value,
                seoDescriptionPrompt: document.getElementById('seoDescriptionPrompt').value,
                seoPermalinkPrompt: document.getElementById('seoPermalinkPrompt').value,
                seoModelTemperature: document.getElementById('seoModelTemperature').value,
                seoModelName: seoModel, // Use the value from the hidden input
                // Keep these properties but set to empty strings to avoid backend errors
                toneVoice: "",
                seoGuidelines: "",
                thingsToAvoid: "",
                articleFormat: "",
                useArticleFormat: false,
                enableRecipeDetection: false,
                recipeFormatPrompt: ""
            };
            
            // Make sure to use application/json content type
            fetch('/api/save-prompt-settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Prompt settings saved successfully!', 'success');
                } else {
                    showAlert(`Failed to save prompt settings: ${data.error}`, 'danger');
                }
            })
            .catch(error => {
                showAlert(`Error saving prompt settings: ${error.message}`, 'danger');
            });
        });
        
        // Toggle card body collapse
        const toggleButtons = document.querySelectorAll('.toggle-card-body');
        toggleButtons.forEach(button => {
            button.addEventListener('click', function() {
                const icon = this.querySelector('i');
                if (icon.classList.contains('bi-dash-lg')) {
                    icon.classList.remove('bi-dash-lg');
                    icon.classList.add('bi-plus-lg');
                } else {
                    icon.classList.remove('bi-plus-lg');
                    icon.classList.add('bi-dash-lg');
                }
            });
        });
        
        // ===== Test Prompt Generation =====
        // Test prompt button click
        document.getElementById('test-prompt-btn').addEventListener('click', function() {
            const testPromptModal = new bootstrap.Modal(document.getElementById('testPromptModal'));
            testPromptModal.show();
        });
        
        // Run test prompt generation
        document.getElementById('runTestPromptBtn').addEventListener('click', function() {
            const testKeyword = document.getElementById('testKeyword').value.trim();
            
            if (!testKeyword) {
                showAlert('Please enter a keyword to test', 'warning');
                return;
            }
            
            const testPromptSpinner = document.getElementById('testPromptSpinner');
            const testPromptResult = document.getElementById('testPromptResult');
            const testPromptTitle = document.getElementById('testPromptTitle');
            const testPromptContent = document.getElementById('testPromptContent');
            
            // Show spinner, hide result
            testPromptSpinner.classList.remove('d-none');
            testPromptResult.classList.add('d-none');
            
            // Collect current prompt settings - get model values directly from hidden inputs
            const promptSettings = {
                useMultiPartGeneration: false,
                systemPrompt: document.getElementById('systemPrompt').value,
                userPrompt: document.getElementById('userPrompt').value,
                model: document.getElementById('selectedModel').value, // Direct access to hidden input
                temperature: document.getElementById('temperatureRange').value,
                maxTokens: document.getElementById('maxTokens').value,
                // Other fields
                mainPrompt: document.getElementById('mainPrompt').value,
                part1Prompt: document.getElementById('part1Prompt').value,
                part2Prompt: document.getElementById('part2Prompt').value,
                part3Prompt: document.getElementById('part3Prompt').value,
                // SEO fields
                seoSystemPrompt: document.getElementById('seoSystemPrompt').value,
                seoTitlePrompt: document.getElementById('seoTitlePrompt').value,
                seoDescriptionPrompt: document.getElementById('seoDescriptionPrompt').value,
                seoPermalinkPrompt: document.getElementById('seoPermalinkPrompt').value,
                seoModelTemperature: document.getElementById('seoModelTemperature').value,
                seoModelName: document.getElementById('selectedSeoModel').value, // Direct access to hidden input
                // Empty fields
                toneVoice: "",
                seoGuidelines: "",
                thingsToAvoid: "",
                articleFormat: "",
                useArticleFormat: false,
                enableRecipeDetection: false,
                recipeFormatPrompt: ""
            };
            
            // Call API to test generation
            fetch('/api/test-prompt-generation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache'
                },
                body: JSON.stringify({
                    keyword: testKeyword,
                    promptSettings: promptSettings
                })
            })
            .then(response => response.json())
            .then(data => {
                testPromptSpinner.classList.add('d-none');
                
                if (data.success) {
                    testPromptResult.classList.remove('d-none');
                    testPromptTitle.textContent = data.article.title;
                    
                    // Get first 500 characters as preview
                    const contentPreview = data.article.content.substring(0, 500) + '...';
                    testPromptContent.textContent = contentPreview;
                } else {
                    showAlert(`Test generation failed: ${data.error}`, 'danger');
                }
            })
            .catch(error => {
                testPromptSpinner.classList.add('d-none');
                showAlert(`Error testing generation: ${error.message}`, 'danger');
            });
        });
        
        // Function to show alerts
        function showAlert(message, type = 'info') {
            // Create alert container if it doesn't exist
            let alertContainer = document.querySelector('.alert-container');
            if (!alertContainer) {
                alertContainer = document.createElement('div');
                alertContainer.className = 'alert-container position-fixed top-0 end-0 p-3';
                document.body.appendChild(alertContainer);
            }
            
            // Create alert element
            const alertEl = document.createElement('div');
            alertEl.className = `alert alert-${type} alert-dismissible fade show`;
            alertEl.role = 'alert';
            alertEl.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            // Add to container
            alertContainer.appendChild(alertEl);
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                alertEl.classList.remove('show');
                setTimeout(() => {
                    alertEl.remove();
                }, 300);
            }, 5000);
        }
        
        // Validate model name function
        function validateModelName(modelName) {
            if (!modelName || typeof modelName !== 'string') return false;
            
            // Valid OpenAI models
            const validModels = [
                'gpt-4', 'gpt-4o', 'gpt-3.5-turbo', 'gpt-4o-mini', 'gpt-4-32k',
                'gpt-4-turbo', 'gpt-4-turbo-preview', 'gpt-4-vision-preview', 'gpt-4-1106-preview',
                'gpt-4-0125-preview', 'gpt-4-turbo-2024-04-09', 'gpt-4o-2024-05-13',
                'gpt-3.5-turbo-16k', 'gpt-3.5-turbo-1106', 'gpt-3.5-turbo-instruct'
            ];
            
            // Check if the model is in our list
            if (validModels.includes(modelName)) {
                return true;
            }
            
            // Check if it matches common patterns
            const patterns = [
                /^gpt-[34](\.\d+)?(-turbo)?(-\d{4}-\d{2}-\d{2})?(-preview)?$/,
                /^gpt-4o(-mini)?(-\d{4}-\d{2}-\d{2})?(-preview)?$/,
                /^ft:.*$/  // Fine-tuned models
            ];
            
            return patterns.some(pattern => pattern.test(modelName));
        }
        
        // Initialize components - immediate execution
        function init() {
            // First load custom models
            loadCustomModels();
            loadSeoCustomModels();
            
            // Get initial model values
            const initialModel = selectedModelInput.value;
            const initialSeoModel = selectedSeoModelInput.value;
            
            console.log('Initial models:', { main: initialModel, seo: initialSeoModel });
            
            // Select the initial models
            if (initialModel) {
                selectModel(initialModel);
            } else {
                // Default to gpt-4 if no model specified
                selectModel('gpt-4');
            }
            
            if (initialSeoModel) {
                selectSeoModel(initialSeoModel);
            } else {
                // Default to gpt-4 if no SEO model specified
                selectSeoModel('gpt-4');
            }
        }
        
        // Call init function after DOM loaded
        init();
    });
</script>

<%- include('partials/footer') %>